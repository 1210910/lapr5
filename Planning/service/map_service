:- module(map_service, [converte_mapa/1]).

:- use_module('../persistence/DB').
:- use_module(library(http/json)).

clear_map_facts :-
    retractall(m(_, _, _)),
    retractall(node(_, _, _)).

clear_graph_facts :-
    retractall(ligacel(_, _)),
    retractall(edge(_, _, _)).

cria_fatos(0, _).
cria_fatos(Colunas, Linhas) :-
    Colunas > 0,
    cria_linha(Colunas, Linhas),
    NovasColunas is Colunas - 1,
    cria_fatos(NovasColunas, Linhas).

cria_linha(_, 0).
cria_linha(Colunas, Linha) :-
    Linha > 0,
    assertz(m(Colunas, Linha, 0)),
    NovaLinha is Linha - 1,
    cria_linha(Colunas, NovaLinha).

converte_mapa(X):-
    db:map(X, Y,_,_,_),
    convert_mapa(Y).

convert_mapa(Mapa) :-
    converte_mapa_linhas(Mapa, 1).

converte_mapa_linhas([], _).
converte_mapa_linhas([Linha | Resto], Lin) :-
    converte_linha(Linha, 1, Lin),
    NextLine is Lin + 1,
    converte_mapa_linhas(Resto, NextLine).

converte_linha([], _, _).
converte_linha([Celula | Resto], Col, Lin) :-
    (   member(Celula, [1,2,3,9]) ->
        asserta(m(Col, Lin, Celula))
    ;   % Outros valores são tratados como 0
        asserta(m(Col, Lin, 0))
    ),
    NextCol is Col + 1,
    converte_linha(Resto, NextCol, Lin).

numero_maximo_linhas(Matriz, NumeroLinhas) :-
    length(Matriz, NumeroLinhas).

numero_maximo_colunas(Matriz, NumeroColunas) :-
        length(Matriz, NumeroLinhas),
        (   NumeroLinhas > 0,
            nth1(1, Matriz, PrimeiraLinha),
            length(PrimeiraLinha, NumeroColunas)
        ;   NumeroColunas is 0
        ).

cria_grafo(X):-
    db:map(X, Y,_,_,_),
    numero_maximo_linhas(Y, Linhas),
    numero_maximo_colunas(Y, Colunas),
    cria_grafo(Colunas,Linhas).


cria_grafo(_,0):-!.
cria_grafo(Col,Lin):-cria_grafo_lin(Col,Lin),Lin1 is Lin- 1,cria_grafo(Col,Lin1).
cria_grafo_lin(0,_):-!.
cria_grafo_lin(Col,Lin):-m(Col,Lin,0),!,
ColS is Col+1, ColA is Col-1, LinS is Lin+1,LinA is Lin-1,
((m(ColS,Lin,0),asserta(ligacel(cel(Col,Lin),cel(ColS,Lin)));true)),
((m(ColS,Lin,0),asserta(edge(cel(Col,Lin),cel(ColS,Lin),1));true)),
((m(ColA,Lin,0),asserta(ligacel(cel(Col,Lin),cel(ColA,Lin)));true)),
((m(ColA,Lin,0),asserta(edge(cel(Col,Lin),cel(ColA,Lin),1));true)),
((m(Col,LinS,0),asserta(ligacel(cel(Col,Lin),cel(Col,LinS)));true)),
((m(Col,LinS,0),asserta(edge(cel(Col,Lin),cel(Col,LinS),1));true)),
((m(Col,LinA,0),asserta(ligacel(cel(Col,Lin),cel(Col,LinA)));true)),
((m(Col,LinA,0),asserta(edge(cel(Col,Lin),cel(Col,LinA),1));true)),
%diagonais
((m(ColS,LinS,0),asserta(ligacel(cel(Col,Lin),cel(ColS,LinS)));true)),
((m(ColS,LinS,0),asserta(edge(cel(Col,Lin),cel(ColS,LinS),1.4));true)),
((m(ColA,LinA,0),asserta(ligacel(cel(Col,Lin),cel(ColA,LinA)));true)),
((m(ColA,LinA,0),asserta(edge(cel(Col,Lin),cel(ColA,LinA),1.4));true)),
((m(ColS,LinA,0),asserta(ligacel(cel(Col,Lin),cel(ColS,LinA)));true)),
((m(ColS,LinA,0),asserta(edge(cel(Col,Lin),cel(ColS,LinA),1.4));true)),
((m(ColA,LinS,0),asserta(ligacel(cel(Col,Lin),cel(ColA,LinS)));true)),
((m(ColA,LinS,0),asserta(edge(cel(Col,Lin),cel(ColA,LinS),1.4));true)),
Col1 is Col-1,
cria_grafo_lin(Col1,Lin).
cria_grafo_lin(Col,Lin):-Col1 is Col-1,cria_grafo_lin(Col1,Lin).



dfs(Orig,Dest,Cam):-
        get_time(Ti),
        dfs2(Orig,Dest,[Orig],Cam),
        get_time(Tf),
        T is Tf-Ti,
        assertz(tempo(T)).
dfs2(Dest,Dest,LA,Cam):-
       reverse(LA,Cam).
dfs2(Act,Dest,LA,Cam):-ligacel(Act,X),\+ member(X,LA), dfs2(X,Dest,[X|LA],Cam).




all_dfs(Orig,Dest,LCam):-findall(Cam,dfs(Orig,Dest,Cam),LCam).
better_dfs(Orig,Dest,Cam):-
get_time(Ti),
all_dfs(Orig,Dest,LCam), shortlist(LCam,Cam,_),
get_time(Tf),
T is Tf-Ti,
assertz(tempo(T)).

shortlist([L],L,N):-!,length(L,N). shortlist([L|LL],Lm,Nm):-shortlist(LL,Lm1,Nm1),
length(L,NL),
((NL<Nm1,!,Lm=L,Nm is NL);(Lm=Lm1,Nm is Nm1)).



bfs(Orig,Dest,Cam):-
get_time(Ti),
bfs2(Dest,[[Orig]],Cam),
get_time(Tf),
T is Tf-Ti,
assertz(tempo(T)).

bfs2(Dest,[[Dest|T]|_],Cam):- reverse([Dest|T],Cam).
bfs2(Dest,[LA|Outros],Cam):- LA=[Act|_],
findall([X|LA],
(Dest\==Act,ligacel(Act,X),\+ member(X,LA)), Novos),
append(Outros,Novos,Todos), bfs2(Dest,Todos,Cam).


aStar(Orig,Dest,Cam,Custo):-
        get_time(Ti),
        aStar2(Dest,[(0,0,[Orig])],Cam,Custo),
        get_time(Tf),
        T is Tf-Ti,
        assertz(tempo(T)).

aStar2(Dest,[(_,Custo,[Dest|T])|_],Cam,Custo):-
	reverse([Dest|T],Cam).

aStar2(Dest,[(_,Ca,LA)|Outros],Cam,Custo):-
	LA=[Act|_],
	findall((CEX,CaX,[X|LA]),
		(Dest\==Act,edge(Act,X,CustoX),\+ member(X,LA),
		CaX is CustoX + Ca, estimativa(X,Dest,EstX),
		CEX is CaX +EstX),Novos),
	append(Outros,Novos,Todos),
	sort(Todos,TodosOrd),
	aStar2(Dest,TodosOrd,Cam,Custo).

% substituir a chamada edge(Act,X,CustoX)
% por (edge(Act,X,CustoX);edge(X,Act,CustoX))
% se quiser ligacoes bidirecionais


estimativa(Nodo1,Nodo2,Estimativa):-
	node(Nodo1,X1,Y1),
	node(Nodo2,X2,Y2),
	Estimativa is sqrt((X1-X2)^2+(Y1-Y2)^2).

transform_node :-
          findall(m(X,Y,Z), m(X,Y,Z), Ms),
          transform_list(Ms).

transform_list([]).
transform_list([m(X,Y,_)|Ms]) :-
          assertz(node(cel(X,Y),X,Y)),
          transform_list(Ms).


carrega_conexoes :-
    findall(passageway(X, Y, Z), db:passageway(X, Y, Z), Passagens), % Encontra todas as passagens carregadas
    processa_passagens(Passagens). % Processa as passagens para criar as conexões entre os edifícios

processa_passagens([]). % Caso base, quando não há mais passagens para processar
processa_passagens([passageway(_, Y, Z) | Resto]) :-
    atom_chars(Z, [Edificio2, _ | _]), % Extrai a letra do edifício A
    atom_chars(Y, [Edificio1, _ | _]), % Extrai a letra do edifício B
    assertz(liga(Edificio2, Edificio1)),% Cria a conexão entre os edifícios
    assertz(liga(Edificio1, Edificio2)),% Cria a conexão entre os edifícios
    processa_passagens(Resto). % Processa o restante das passagens recursivamente


path_buildings(BdOr,BdDest,LBdPath):-path_buildings2(BdOr,BdDest,[BdOr],LBdPath).
path_buildings2(BdX,BdX,LBdInv,LBdPath):-!,reverse(LBdInv,LBdPath).
path_buildings2(BdAct,BdDest,LBdPassed,LBdPath):-(liga(BdAct,BdInt);liga(BdInt,BdAct)), \+member(BdInt,LBdPassed), path_buildings2(BdInt,BdDest,[BdInt|LBdPassed],LBdPath).


all_path_buildings(BdOr,BdDest,LTPathBd):-findall(LBdPath,path_buildings(BdOr,BdDest,LBdPath),LTPathBd).



% Método para criar os fatos floors/2 a partir de floor/3
create_floors :-
    findall(Building-FloorCodes, floors_building(Building, FloorCodes), BuildingFloorsList),
    create_floors_facts(BuildingFloorsList).

% Método para encontrar todos os códigos de andares de um edifício
floors_building(Building, FloorCodes) :-
    setof(Code, Number^floor(Code, Number, Building), FloorCodes).

% Método para criar os fatos floors/2 a partir da lista de Building-FloorCodes
create_floors_facts([]).
create_floors_facts([Building-FloorCodes | Rest]) :-
    assertz(floors(Building, FloorCodes)),
    create_floors_facts(Rest).


% Método para criar os fatos elevator/2 a partir de lift/3
create_elevators :-
    findall(Building-Floors, lift(_, Building, Floors), BuildingFloorsList),
    create_elevator_facts(BuildingFloorsList).

% Método para criar os fatos elevator/2 a partir da lista de Building-Floors
create_elevator_facts([]).
create_elevator_facts([Building-Floors | Rest]) :-
    assertz(elevator(Building, Floors)),
    create_elevator_facts(Rest).


% Método para criar os fatos corridor/4 a partir de passageway/3
create_corridors :-
    findall(Floor1-Floor2, passageway(_, Floor1, Floor2), CorridorList),
    create_corridor_facts(CorridorList).

% Método para criar os fatos corridor/4 a partir da lista de Building1-Building2-Floor1-Floor2
create_corridor_facts([]).
create_corridor_facts([Floor1-Floor2 | Rest]) :-
    atom_chars(Floor1, [Building1Code | _]), % Extrai o primeiro caractere do código do andar para o código do edifício
    atom_chars(Floor2, [Building2Code | _]), % Extrai o primeiro caractere do código do andar para o código do edifício
    assertz(corridor(Building1Code, Building2Code, Floor1, Floor2)),
    create_corridor_facts(Rest).


extract_building_floor(RoomCode, BuildingCode, FloorCode) :-
    atom_chars(RoomCode, [BuildingChar1, BuildingChar2 | Rest]),
    (   Rest = [DigitChar | _], char_type(DigitChar, digit)
    ->  BuildingCode = BuildingChar1,
        atom_chars(FloorCode, [BuildingChar1, BuildingChar2])
    ;   BuildingCode = BuildingChar1,
        atom_chars(FloorCode, [BuildingChar2 | Rest])
    ).


get_all_floors(LCon, AllFloors) :-
    get_all_floors(LCon, [], TempAllFloors),
    remove_duplicates(TempAllFloors, AllFloors).

get_all_floors([], AllFloors, AllFloors).
get_all_floors([Term | Rest], Acc, AllFloors) :-
    extract_floor(Term, Floors),
    append(Acc, Floors, NewAcc),
    get_all_floors(Rest, NewAcc, AllFloors).

extract_floor(cor(FloorCode1, FloorCode2), [FloorCode1, FloorCode2]) :- !.
extract_floor(elev(FloorCode1, FloorCode2), [FloorCode1, FloorCode2]) :- !.
extract_floor(_, []). % Caso não seja nem cor/2 nem elev/2, retorna uma lista vazia.

% Remove duplicatas da lista
remove_duplicates([], []).
remove_duplicates([H | T], List) :-
    member(H, T),
    remove_duplicates(T, List).
remove_duplicates([H | T], [H | T1]) :-
    \+ member(H, T),
    remove_duplicates(T, T1).

create_passageways_from_map :-
    findall(Passageway, db:map(_, _, Passageway, _, _), Passageways),
    maplist(process_passageways_from_json, Passageways).

% Predicado para processar as passagens a partir de um JSON
process_passageways_from_json(JSON) :-

    extract_passageways(JSON).

% Predicado para extrair e criar os fatos passageway_info/4
extract_passageways([]).
extract_passageways([Passageway | Rest]) :-

    Passageway = json([passagewayCode=Code, position=Position]),

    extract_letters(Code, F1, F2),
    create_passageway_info(F1, F2, Position),
    extract_passageways(Rest).


extract_letters(Code, FirstLetters, SecondLetters) :-
    sub_atom(Code, 1, 2, _, FirstLetters),
    sub_atom(Code, 3, 2, _, SecondLetters).

create_passageway_info(F1, F2, Position) :-
    (
        % Verifica se o fato já existe com os argumentos F1 e F2
        clause(passageway_info(F1, F2, CPosition, Position), true) ->
        % Se existir, retract do fato atual e adiciona a nova posição
        retract(passageway_info(F1, F2, CPosition, Position)),
        assertz(passageway_info(F1, F2, CPosition, Position))
        ;
        % Se não existir, cria um novo fato com a nova posição
        assertz(passageway_info(F1, F2, Position, _))
    ).





get_entry_exit_positions([], [EntryExitPosition ]) :-
    room_dest(_, Position),
    room_origin(_, PositionE),
    Position = [X, Y],
    X1 is X + 1,
    Y1 is Y + 1,
    ExitRoom = cel(Y1, X1),
    PositionE = [XE, YE],
    XE1 is XE + 1,
    YE1 is YE + 1,
    EntryRoom = cel(YE1, XE1),
    (
        catch((next_entry(EntryCel), retractall(next_entry(_))), _, fail) ->
        true
        ;
        EntryCel = EntryRoom
    ),
    EntryExitPosition = cam(EntryCel, ExitRoom).

get_entry_exit_positions([_], [EntryExitPosition]):-
    get_entry_exit_positions([], [EntryExitPosition]).

get_entry_exit_positions([Floor1, Floor2 | Rest], [EntryExitPosition | RestEntryExitPositions]) :-
    room_origin(_, Position),
    Position = [X, Y],
    X1 is X + 1,
    Y1 is Y + 1,
    EntryRoom = cel(Y1, X1),
    (
        (passageway_info(Floor1, Floor2, NextExit, LastEntry);
        passageway_info(Floor2, Floor1, LastEntry, NextExit)) ->
            (
            (
                        catch((next_entry(EntryCel), retract(next_entry(_))), _, fail) ->
                          true
                            ;
                          EntryCel = EntryRoom
              ),
            list_to_cel(LastEntry, LastEntryCel),
            assertz(next_entry(LastEntryCel)),
            list_to_cel(NextExit, NextExitCel),
            EntryExitPosition = cam( EntryCel, NextExitCel)
            );
            (
            is_same_building_transition(Floor1, Floor2),
            db:map(Floor1, _,  _, Exit, _),
            db:map(Floor2, _,  _, Entry, _),
            (
            catch((next_entry(EntryCel)), _, fail) ->
            true
              ;
            EntryCel = EntryRoom
                  ),
            (
            catch((retract(next_entry(_))), _, fail) ->
            true
              ;
            true
                  ),
            [EntryX] = Entry,
            list_to_cel(EntryX, NextCel),
            assertz(next_entry(NextCel)),
            [ExitX] = Exit,
            list_to_cel(ExitX, ExitCel),
            EntryExitPosition = cam(EntryCel, ExitCel)
            )
    ),
    get_entry_exit_positions([Floor2| Rest], RestEntryExitPositions).




list_to_cel([X, Y], Z):- X1 is X+1, Y1 is Y+1, Z = cel(Y1, X1).

% Lógica para identificar se é uma transição no mesmo edifício (considerada elevador)
is_same_building_transition(Floor1, Floor2) :-
    sub_atom(Floor1, 0, _, _, BuildingCode),
    sub_atom(Floor2, 0, _, _, BuildingCode).


process_path([], [], ResultPath, ResultPath, TotalCost, TotalCost).

process_path([cam(Entry, Exit) | Rest], [], CurrentPath, ResultPath, CurrentCost, TotalCost):-
    room_dest(Code, _),
    extract_building_floor(Code, _, FloorCode),


    converte_mapa(FloorCode),

    cria_grafo(FloorCode),

    transform_node,

    aStar(Entry, Exit, Cam, CostCam),
    clear_map_facts,
    clear_graph_facts,
    Caminho = cam(FloorCode, Cam),
    NewCost is CurrentCost + CostCam,
    append(CurrentPath, [Caminho], NewPath),
    process_path(Rest, [], NewPath, ResultPath, NewCost, TotalCost).

process_path([cam(Entry, Exit) | Rest], [Floor|RestFloor], CurrentPath, ResultPath, CurrentCost, TotalCost) :-

    converte_mapa(Floor),

    cria_grafo(Floor),

    transform_node,

    aStar(Entry, Exit, Cam, CostCam),
    clear_map_facts,
    clear_graph_facts,
    clear_node_facts,
    Caminho = cam(Floor, Cam),
    NewCost is CurrentCost + CostCam,
    append(CurrentPath, [Caminho], NewPath),
    process_path(Rest, RestFloor, NewPath, ResultPath, NewCost, TotalCost).

clear_node_facts :-
    retractall(node(_, _, _)).


load_floor_rooms():-
    findall(Floor, db:map(Floor, _, _, _, _), Floors),

    maplist(process_floor_rooms, Floors).

process_floor_rooms(Floor) :-
    db:map(Floor, _, _, _, Rooms),

    maplist(process_room, Rooms).

process_room(Room) :-

    Room = json([roomCode=Code, position=Position]),

    assertz(room_location(Code, Position)).

set_room_origin_dest(Origin, Dest):-
   room_location(Origin,PositionOrigin),
   room_location(Dest,PositionDest),
   assertz(room_origin(Origin,PositionOrigin)),
   assertz(room_dest(Dest,PositionDest)).


path_floors(FloorOr,FloorDest,LBdPath,LCon):-
    floors(BdOr,LFloorOr),member(FloorOr,LFloorOr),
    floors(BdDest,LFloorsDest),member(FloorDest,LFloorsDest), path_buildings(BdOr,BdDest,LBdPath), follow_floors(FloorOr,FloorDest,LBdPath,LCon).
    follow_floors(FloorDest,FloorDest,_,[]).
follow_floors(FloorDest1,FloorDest,[BdDest],[elev(FloorDest1,FloorDest)]):-
    FloorDest\==FloorDest1, elevator(BdDest,LFloors),member(FloorDest1,LFloors), member(FloorDest,LFloors).
follow_floors(FloorAct,FloorDest,[BdAct,BdNext|LOthersBd],[cor(FloorAct,FloorNext)|LOtherCon]):-
    (corridor(BdAct,BdNext,FloorAct,FloorNext);corridor(BdNext,BdAct,FloorNext,FloorAct)), follow_floors(FloorNext,FloorDest,[BdNext|LOthersBd],LOtherCon).
follow_floors(FloorAct,FloorDest,[BdAct,BdNext|LOthersBd], [elev(FloorAct,FloorAct1),cor(FloorAct1,FloorNext)|LOtherCon]):-
    (corridor(BdAct,BdNext,FloorAct1,FloorNext); corridor(BdNext,BdAct,FloorNext,FloorAct1)),FloorAct1\==FloorAct, elevator(BdAct,LFloors),member(FloorAct,LFloors),
    member(FloorAct1,LFloors), follow_floors(FloorNext,FloorDest,[BdNext|LOthersBd],LOtherCon).

% d Choose the path that involves fewer elevator usages, and in case of equality, less usage of corridors, fewer transfers.
better_path_floors(FloorOr,FloorDest,LBetterCon):-
    findall(LLCon,path_floors(FloorOr,FloorDest,_,LLCon),LLLCon),
    less_elevators(LLLCon,LBetterCon,_,_).
less_elevators([LLCon],LLCon,NElev,NCor):-count(LLCon,NElev,NCor). less_elevators([LCon|OthersLCon],LConR,NElevR,NCorR):-
        less_elevators(OthersLCon,LConM,NElev,NCor),
        count(LCon,NElev1,NCor1),
        (((NElev1<NElev;(NElev1==NElev,NCor1<NCor)),!,
        NElevR is NElev1, NCorR is NCor1,LConR=LCon);
        (NElevR is NElev,NCorR is NCor,LConR=LConM)).
count([],0,0). count([elev(_,_)|L],NElev,NCor):-count(L,NElevL,NCor),NElev is NElevL+1. count([cor(_,_)|L],NElev,NCor):-count(L,NElev,NCorL),NCor is NCorL+1.


encontrar_melhor_plano(Tarefas,Plano, Duracao) :-
    melhor_duracao(Tarefas, Plano, Duracao).

melhor_duracao(Tarefas, MelhorPlano, MelhorDuracao) :-
    permutacao(Tarefas, Plano),
    calcular_duracao(Plano, Duracao),
    (
        var(MelhorDuracao) ->
        MelhorDuracao = Duracao,
        MelhorPlano = Plano
    ;
        Duracao < MelhorDuracao ->
        MelhorDuracao = Duracao,
        MelhorPlano = Plano
    ;
        true
    ),
    melhor_duracao(Tarefas, MelhorPlano, MelhorDuracao).

permutacao(Lista, Permutacao) :-
    permutation(Lista, Permutacao).

calcular_duracao([], 0).
calcular_duracao(_, 0). % Remova o caso base com uma única tarefa, pois já é tratado na regra acima
calcular_duracao([Tarefa1, Tarefa2|Resto], Duracao) :-
    tarefa(Tarefa1, Tarefa2, Custo),
    calcular_duracao([Tarefa2|Resto], DuracaoRestante),
    Duracao is Custo + DuracaoRestante.

% Adiciona a última tarefa ao final da lista
adicionar_ultima_tarefa(Plano, UltimaTarefa, PlanoFinal) :-
    append(Plano, [UltimaTarefa], PlanoFinal).


find_task_start_end(Task, Start, End) :-
    db:task(Task, Start, End).

create_t_facts(Task1, Task2, Cost1) :-
    assertz(tarefa(Task1, Task2, Cost1)).


add_task_to_db() :-
    assertz(db:task('Task1', 'D103', 'C303')),
    assertz(db:task('Task2', 'D103', 'D102')),
    assertz(db:task('Task3', 'D102', 'D203')),
    assertz(db:task('Task4', 'D205', 'D103')),
    assertz(db:task('Task5', 'C204', 'C303')).


clear_facts() :-
    retract(room_origin(_,_)),
    retract(room_dest(_,_)).










