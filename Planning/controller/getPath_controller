:- module(getPath_controller, [get_path/3]).


:- use_module('../service/map_service').
:- use_module('../persistence/DB').

% get the path

get_path(Start, End, Response) :-
    db_controller:load_db,
    atom_string(StartStr, Start), % Convertendo Start para string, se n達o for
    atom_string(EndStr, End), % Convertendo End para string, se n達o for
    map_service:load_floor_rooms(),
    map_service:set_room_origin_dest(StartStr, EndStr),
    map_service:carrega_conexoes,
    map_service:create_floors,
    map_service:create_elevators,
    map_service:create_corridors,
    map_service:create_passageways_from_map,
    map_service:extract_building_floor(StartStr, _, StartFloor),
    map_service:extract_building_floor(EndStr, _, EndFloor),
    map_service:path_floors(StartFloor, EndFloor, PathBuilding, PathFloors),
    map_service:get_all_floors(PathFloors,AllFloors),
    map_service:get_entry_exit_positions(AllFloors,EntryExitPositions),
    map_service:process_path(EntryExitPositions,AllFloors,_,ResultPath,0,_),!,
    % criar a resposta
    format_response(ResultPath, PathBuilding, PathFloors, Response).

get_path_cost(Start, End, Response) :-
    db_controller:load_db,
    atom_string(StartStr, Start), % Convertendo Start para string, se n達o for
    atom_string(EndStr, End), % Convertendo End para string, se n達o for
    map_service:load_floor_rooms(),
    map_service:set_room_origin_dest(StartStr, EndStr),
    map_service:carrega_conexoes,
    map_service:create_floors,
    map_service:create_elevators,
    map_service:create_corridors,
    map_service:create_passageways_from_map,
    map_service:extract_building_floor(StartStr, _, StartFloor),
    map_service:extract_building_floor(EndStr, _, EndFloor),
    map_service:path_floors(StartFloor, EndFloor, _, PathFloors),
    map_service:get_all_floors(PathFloors,AllFloors),
    map_service:get_entry_exit_positions(AllFloors,EntryExitPositions),
    map_service:process_path(EntryExitPositions,AllFloors,_,_,0,Cost),!,
    % criar a resposta
    Response = Cost.


order_path([Task1,Task2|Tasks], Response) :-
    map_service:find_task_start_end(Task1, _, End1),
    map_service:find_task_start_end(Task2, Start2, _),
    get_path_cost(End1, Start2, Cost1),
    map_service:create_t_facts(Task1, Task2, Cost1),
    order_path([Task2|Tasks], Response).

order_path([_], Response) :-
    map_service:encontrar_plano(Plano,Duracao),
    Response = json{
        path:Plano,
        duration:Duracao
    }.

order_path([], _).



format_response(ResultPath, PathBuilding, PathFloors, Response) :-
    % Cria o termo JSON com os campos especificados
    term_to_string(ResultPath, ResultPathString),
    term_to_string(PathBuilding, PathBuildingString),
    term_to_string(PathFloors, PathFloorsString),
    Response = json{
    path:ResultPathString,
    building:PathBuildingString,
    floor:PathFloorsString
    }.

result_path_to_string(ResultPath, ResultString) :-
        atomic_list_concat(ResultPath, ',', ResultString).

term_to_string(Term, String) :-
    with_output_to(string(String), write_term(Term, [quoted(true)])).


